type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase


    class CalcTest(StageTest):
        on_exit = False

        def generate(self) -> List[TestCase]:
            return [TestCase(stdin=['/help', self.test_1, self.test_2]),
                    TestCase(stdin=['7 + 1 + 4', self.test_3, self.test_4, self.test_5, self.test_6,
                                    self.test_7, self.test_8, self.test_9]),
                    TestCase(stdin=['123+', self.test_10, self.test_11, self.test_12,
                                    self.test_13, self.test_14, self.test_15])]

        # test of help command
        def test_1(self, output):
            output = str(output).lower().strip()
            if len(output.split(" ")) < 3:
                return CheckResult.wrong("It seems like there was no any \"help\" message.")
            return ""

        # test of an empty input
        def test_2(self, output):
            output = str(output)
            if len(output) != 0:
                return CheckResult.wrong("Incorrect response to an empty string. "
                                         "The program should not print anything.")
            self.on_exit = True
            return "/exit"

        # the previous stage tests #################################################
        # sum of positive
        def test_3(self, output):
            output = str(output).lower().strip()
            if output != "12":
                return CheckResult.wrong("The program cannot sum more than two numbers.")
            return "23 - 17 - 13"

        # mixed operations
        def test_4(self, output):
            output = str(output).lower().strip()
            if output != "-7":
                return CheckResult.wrong("Incorrect sum of positive and negative numbers.")
            return "33 + 21 + 11 + 49 - 32 - 9 + 1 - 80 + 4"

        # mixed operations
        def test_5(self, output):
            output = str(output).lower().strip()
            if output != "-2":
                return CheckResult.wrong("Incorrect sum of positive and negative numbers.")
            return "101"

        # one positive
        def test_6(self, output):
            output = str(output).lower().strip()
            if output != "101":
                return CheckResult.wrong("The program printed not the same number that was entered "
                                         "(when one number is entered it is a valid expression).")
            return "-302"

        # one negative
        def test_7(self, output):
            output = str(output).lower().strip()
            if output != "-302":
                return CheckResult.wrong("The program printed not the same number that was entered.")
            return "10 - 7 - 3"

        # sum is equal to zero
        def test_8(self, output):
            output = str(output).lower().strip()
            if output != "0":
                return CheckResult.wrong("The problem when sum is equal to 0 has occurred.")
            return "5 --- 2 ++++++ 4 -- 2 ---- 1"

        # multiple operators
        def test_9(self, output):
            output = str(output).lower().strip()
            if output != "10":
                return CheckResult.wrong("The program cannot process multiple operations with several operators.")
            self.on_exit = True
            return "/exit"

        # tests for this step ######################################################
        # test of invalid expression
        def test_10(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program cannot process an invalid expression.")
            return "321-"

        # test of invalid expression
        def test_11(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program cannot process an invalid expression.")
            return "+7"

        # input one number with plus in front of it
        def test_12(self, output):
            output = str(output).lower().strip()
            if output != "7":
                return CheckResult.wrong("The program not correctly processes useless plus sign.")
            return "abc"

        # not numbers in input
        def test_13(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program should print \"Invalid expression\" " +
                                         "when not a numbers are entered")
            return "one + two + three"

        # not numbers in input
        def test_14(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program should print \"Invalid expression\" " +
                                         "when not a numbers are entered")
            return "/go"

        # test of nonexistent command
        def test_15(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output:
                return CheckResult.wrong("The program should print \"Unknown command\" " +
                                         "when a nonexistent command is entered.")
            self.on_exit = True
            return "/exit"

        def check(self, reply: str, attach) -> CheckResult:
            if self.on_exit:
                reply = reply.strip().lower().split('\n')
                self.on_exit = False
                if 'bye' not in reply[-1]:
                    return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".")
                else:
                    return CheckResult.correct()
            else:
                return CheckResult.wrong("The program ended prematurely")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |-
    while True:
        s = input()
        if s == '':
            continue
        elif s[0] == '/':
            if s == '/exit':
                break
            elif s == '/help':
                print('The program calculates the sum of numbers')
                continue
            else:
                print('Unknown command')
                continue
        s = s.split()
        res, sign, valid = 0, 1, False
        for el in s:
            # print(res, sign, valid, el)
            if el.isnumeric() or (el[0] in '-+' and el[1:].isnumeric()):
                if not valid:
                    res, sign, valid = res + sign * int(el), 1, True
                else:
                    print('Invalid expression')
                    break
            else:
                for ch in el:
                    if ch == '-':
                        sign *= -1
                valid = False
        else:
            if valid:
                print(res)
            else:
                print('Invalid expression')
    print('Bye!')
  learner_created: false
feedback_link: https://hyperskill.org/projects/74/stages/413/implement
status: Solved
record: 5
